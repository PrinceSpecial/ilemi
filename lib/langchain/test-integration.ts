// Test d'int√©gration LangChain avec Vercel AI SDK
// Ce fichier permet de v√©rifier que LangChain fonctionne avec notre configuration existante

import { createLLM } from "./config";

export async function testLangChainIntegration() {
  try {
    console.log("üß™ Test d'int√©gration LangChain.js...");

    // Test de cr√©ation du LLM
    const llm = createLLM();
    console.log("‚úÖ LLM cr√©√© avec succ√®s");

    // Test d'appel simple
    const response = await llm.invoke("Bonjour, pouvez-vous me dire qui vous √™tes ?");
    console.log("‚úÖ R√©ponse du LLM:", response.content);

    // Test avec un prompt plus complexe
    const complexPrompt = `Vous √™tes un assistant sp√©cialis√© dans l'analyse de documents topographiques au B√©nin.
    Un utilisateur vous demande: "Pouvez-vous analyser ma parcelle fonci√®re ?"
    R√©pondez en fran√ßais de mani√®re professionnelle.`;

    const complexResponse = await llm.invoke(complexPrompt);
    console.log("‚úÖ R√©ponse complexe:", complexResponse.content);

    return {
      success: true,
      message: "Int√©gration LangChain r√©ussie"
    };

  } catch (error) {
    console.error("‚ùå Erreur lors du test d'int√©gration:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Erreur inconnue"
    };
  }
}

// Test des tools (placeholders)
export async function testToolsIntegration() {
  try {
    console.log("üõ†Ô∏è Test des tools...");

    const { RetrieveDocumentTool } = await import("../tools/retrieve-document");
    const { GetAnalysisDataTool } = await import("../tools/get-analysis-data");

    const retrieveTool = new RetrieveDocumentTool();
    const analysisTool = new GetAnalysisDataTool();

    console.log("‚úÖ Tools cr√©√©s avec succ√®s");

    // Test d'appel des tools
    const retrieveResult = await retrieveTool._call("test query");
    const analysisResult = await analysisTool._call("test analysis");

    console.log("‚úÖ Tools fonctionnels:");
    console.log("- Retrieve:", retrieveResult);
    console.log("- Analysis:", analysisResult);

    return {
      success: true,
      message: "Tools op√©rationnels"
    };

  } catch (error) {
    console.error("‚ùå Erreur lors du test des tools:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Erreur inconnue"
    };
  }
}

// Test complet de l'agent
export async function testAgentIntegration() {
  try {
    console.log("ü§ñ Test de l'agent complet...");

    const { runAgent } = await import("./agent");

    const testInput = "Bonjour, je voudrais v√©rifier ma parcelle fonci√®re";
    const result = await runAgent(testInput);

    console.log("‚úÖ Agent ex√©cut√© avec succ√®s");
    console.log("üìù R√©ponse:", result.message);
    console.log("üé® Composants UI:", result.uiComponents);

    return {
      success: true,
      message: "Agent op√©rationnel",
      response: result.message,
      uiComponents: result.uiComponents
    };

  } catch (error) {
    console.error("‚ùå Erreur lors du test de l'agent:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Erreur inconnue"
    };
  }
}